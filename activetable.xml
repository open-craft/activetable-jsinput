<problem display_name="ActiveTable">
<script type="loncapa/python">
<![CDATA[
import json
import re

## Library part
# You usually don't need to touch this portion and can jump to "Problem definition".

class ResponseCell(object):
    """Abstract base class for response cells."""

    TYPE = 0

    def get_state(self):
        """Return a dictionary describing the instance for sending to the JS code."""
        d = vars(self).copy()
        d.update(type=self.TYPE)
        return d


class Numeric(ResponseCell):
    """A numeric response cell."""

    TYPE = 1

    def __init__(self, answer, tolerance=None):
        """Set the correct answer and the allowed relative tolerance in percent."""
        self.answer = answer
        if tolerance is None:
            tolerance = default_tolerance
        self.abs_tolerance = abs(answer) * tolerance / 100.0

    def check_response(self, student_response):
        """Return a Boolean value indicating whether the student response is correct."""
        try:
            r = float(student_response)
        except ValueError:
            return False
        return abs(r - self.answer) <= self.abs_tolerance


class String(ResponseCell):
    """A string response cell."""

    TYPE = 2

    def __init__(self, answer):
        """Set the correct answer."""
        self.answer = answer

    def check_response(self, student_response):
        """Return a Boolean value indicating whether the student response is correct."""
        return student_response == self.answer


def init(table):
    data = [
        [cell.get_state() if isinstance(cell, ResponseCell) else str(cell) for cell in row]
        for row in table
    ]
    # Curiously, quotes in the JSON string must be double-escaped.
    return json.dumps(data).replace('"', '&amp;quot;')


def check_consistency(state):
    """Check whether the state of the table is consistent with the initial state.

    If not, the problem was edited in the mean time, and we ask the student to click
    the reset button (as we can't initiate resetting the problem from code).
    """
    if len(table) != len(state):
        return False
    for row, row_state in zip(table, state):
        if len(row) != len(row_state):
            return False
        for cell, cell_state in zip(row, row_state):
            if isinstance(cell, ResponseCell):
                if not isinstance(cell_state, dict):
                    return False
                orig_state = cell.get_state()
                if not all(orig_state[k] == cell_state[k] for k in orig_state):
                    return False
            else:
                if not str(cell) == cell_state:
                    return False
    return True


def check_table(unused_expect, ans):
    ans = json.loads(ans)
#    answer = json.loads(ans['answer'])
    state = json.loads(ans['state'])

    if not check_consistency(state):
        return {
            'ok': False,
            'msg': 'The problem was edited by the course staff since the last time you '
            'worked on it.  Please click the "Reset" button to get the latest version.'
        }

    correct_answers = total_questions = 0
    for row, row_state in zip(table, state):
        for cell, cell_state in zip(row, row_state):
            if isinstance(cell, ResponseCell):
                total_questions += 1
                correct_answers += cell.check_response(cell_state['value'])

    if correct_answers == total_questions:
        return {'ok': True, 'msg': 'Great job!'}
    else:
        return {
            'ok': False,
            'msg': 'You have {} cells out of {} correct.'.format(correct_answers, total_questions)
        }

## Problem definition

default_tolerance = 1.0  # default tolerance in percent
table = [
    ['Carts', 'v_initial', 'v_final', 'Delta v'],
    ['green', 2.0, -1.2, Numeric(answer=-3.2, tolerance=2.0)],
    ['red', -2.0, 1.2, Numeric(answer=3.2, tolerance=2.0)],
]

# Initialisation -- don't remove!
initial_state = init(table)

]]>
</script>
<p>
  Testing out an active table.
</p>
<customresponse cfn="check_table">
  <jsinput gradefn="ActiveTable.grade"
    get_statefn="ActiveTable.getState"
    set_statefn="ActiveTable.setState"
    initial_state="$initial_state"
    width="400"
    height="150"
    html_file="/static/test.html"
    sop="true"/>
</customresponse>
</problem>
